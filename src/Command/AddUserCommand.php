<?php
declare(strict_types=1);

namespace App\Command;

use Cake\Command\Command;
use Cake\Console\Arguments;
use Cake\Console\ConsoleIo;
use Cake\Console\ConsoleOptionParser;

/**
 * AddUser command.
 *
 * @property \App\Model\Table\UsersTable $Users
 */
class AddUserCommand extends Command
{
    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadModel('Users');
    }

    /**
     * Hook method for defining this command's option parser.
     *
     * @see https://book.cakephp.org/4/en/console-commands/commands.html#defining-arguments-and-options
     * @param \Cake\Console\ConsoleOptionParser $parser The parser to be defined
     * @return \Cake\Console\ConsoleOptionParser The built parser.
     */
    public function buildOptionParser(ConsoleOptionParser $parser): ConsoleOptionParser
    {
        $parser = parent::buildOptionParser($parser);

        $parser->addOption('user', [
            'short' => 'u',
            'help' => 'Email',
            'required' => true
        ]);

        $parser->addOption('password', [
            'short' => 'p',
            'help' => 'password',
            'required' => true
        ]);

        return $parser;
    }

    /**
     * Implement this method with your command's logic.
     *
     * @param \Cake\Console\Arguments $args The command arguments.
     * @param \Cake\Console\ConsoleIo $io The console io
     * @return null|void|int The exit code or null for success
     */
    public function execute(Arguments $args, ConsoleIo $io)
    {
        $userName = $args->getOption('user');
        $password = $args->getOption('password');

        if ($userName != "" && $password != "") {
            $newUser = $this->Users->newEmptyEntity();
            $newUser->password = $password;
            $newUser->email = $userName;

            if ($this->Users->save($newUser)) {
                $io->success("User $newUser->email was created");
            }
        }
    }
}
