<?php
declare(strict_types=1);

namespace Api\Controller\V1;

use Api\Controller\AppController;
use App\Shared\Value\ConfigurationSetType;
use App\Shared\Value\TwilioConfiguration;
use Twilio\Rest\Client;

/**
 * Class ApplicationsController
 * @package Api\Controller\V1
 * @property \App\Model\Table\ApplicationLogsTable $Applications
 * @property \App\Model\Table\ApplicationLogsTable $ApplicationLogs
 * @property \App\Service\ConfigurationSetManagerServiceInterface $ConfigurationSetManager
 * @property \App\Service\ApplicationLogManagerServiceInterface $ApplicationLogManager
 */
class ApplicationsController extends AppController
{
    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadModel('Applications');
        $this->loadModel('ApplicationLogs');
        $this->loadService('ConfigurationSetManager');
        $this->loadService('ApplicationLogManager');
    }

    /**
     * curl -i --data state=1 -H "__token__:9ef12666a7d4556c6b1f3c6a949860d8888e1108e265ea1eba238dd437a418d1" http://localhost:8765/api/v1/applications/create-log/1.json
     *
     * @param string $id
     */
    public function createLog($id = "") {
        $application = $this->Applications->get($id, [
            'contain' => 'Nodes'
        ]);
        $applicationLog = $this->ApplicationLogManager->getLastLogForApplication($application->id);

        $newState = $this->request->getData('state');

        if ($applicationLog && $application->node->description!= '') {
            if ($applicationLog->current_state != $newState) {

                $cfgSet = $this->ConfigurationSetManager->getConfiguration(ConfigurationSetType::$twilio);
                $twilioCfg = new TwilioConfiguration();
                $twilioCfg->load($cfgSet);

                $client = new Client($twilioCfg->getSid(), $twilioCfg->getToken());

                $client->messages->create(
                    $application->node->description,
                    [
                        'from' => $twilioCfg->getSender(),
                        'body' => "State change on $application->name to $newState"
                    ]
                );
            }
        }

        $newLog = $this->ApplicationLogs->newEmptyEntity();
        $newLog->current_state = $newState;
        $newLog->application_id = $application->id;

        $this->ApplicationLogs->save($newLog);

        $this->set('newLog', $newLog);
        $this->viewBuilder()->setOption('serialize', 'newLog');
    }
}
